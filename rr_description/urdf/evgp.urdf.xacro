<robot name="evgp" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:property name="use_gpu" value="false"/>

    <xacro:property name="props" value="${load_yaml('../conf/evgp_car_params.yaml')}"/>

    <xacro:include filename="evgp_body.urdf.xacro"/>

    <xacro:evgp_body collision_bitmask="0x1" color="Grey"/>

    <!-- ************************** Links *************************** -->

    <xacro:macro name="null_inertia">
        <inertial>
            <mass value="0.0001"/>
            <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="mesh_geometry">
        <geometry>
            <mesh filename="package://rr_description/meshes/EVGP_robot.STL" scale="0.001 0.001 0.001"/>
        </geometry>
    </xacro:macro>

    <xacro:macro name="set_link_color" params="link color">
        <gazebo reference="${link}">
            <material>Gazebo/${color}</material>
        </gazebo>
    </xacro:macro>


    <xacro:macro name="wheel_link" params="name radius width">
        <link name="${name}">
            <inertial>
                <mass value="0.01"/>
                <inertia ixx="0.001" ixy="0" ixz="0" iyy="0.001" iyz="0"
                         izz="${0.5 * props['wheel_mass'] * pow(radius, 2)}"/>
            </inertial>
            <visual>
                <geometry>
                    <cylinder radius="${radius}" length="${width}"/>
                </geometry>
            </visual>
            <collision>
                <geometry>
                    <cylinder radius="${radius}" length="${width}"/>
                </geometry>
            </collision>
        </link>
        <gazebo reference="${name}">
            <mu1>0.7</mu1>
            <mu2>0.7</mu2>
            <kp>1000000</kp>
            <kd>1000000</kd>
            <collision>
                <surface>
                    <contact>
                        <collide_bitmask>0x1</collide_bitmask>
                    </contact>
                </surface>
            </collision>
        </gazebo>
        <xacro:set_link_color link="${name}" color="Black"/>
    </xacro:macro>
    <xacro:wheel_link name="wheel_BL" radius="${props['wheel_radius_back']}" width="${props['wheel_width_back']}"/>
    <xacro:wheel_link name="wheel_BR" radius="${props['wheel_radius_back']}" width="${props['wheel_width_back']}"/>
    <xacro:wheel_link name="wheel_FL" radius="${props['wheel_radius_front']}" width="${props['wheel_width_front']}"/>
    <xacro:wheel_link name="wheel_FR" radius="${props['wheel_radius_front']}" width="${props['wheel_width_front']}"/>

    <link name="steering_link_left">
        <xacro:null_inertia/>
    </link>
    <link name="steering_link_right">
        <xacro:null_inertia/>
    </link>

    <link name="lidar">
        <xacro:null_inertia/>
        <visual>
            <geometry>
                <cylinder radius="0.1" length="0.1"/>
            </geometry>
        </visual>
    </link>
    <xacro:set_link_color link="lidar" color="Gold"/>

    <link name="gps_link">
        <xacro:null_inertia/>
        <visual>
            <geometry>
                <box size="0.05 0.05 0.05"/>
            </geometry>
        </visual>
    </link>
    <xacro:set_link_color link="gps_link" color="Gold"/>

    <link name="camera">
        <xacro:null_inertia/>
        <visual>
            <geometry>
                <box size="0.05 0.05 0.05"/>
            </geometry>
        </visual>
        <visual>
            <origin rpy="0 ${pi/2} 0" xyz="0.05 0 0"/>
            <geometry>
                <cylinder radius="0.03" length="0.05"/>
            </geometry>
        </visual>
    </link>
    <xacro:set_link_color link="camera" color="Gold"/>

    <link name="imu_link">
        <xacro:null_inertia/>
        <visual>
            <geometry>
                <box size="0.05 0.05 0.05"/>
            </geometry>
        </visual>
    </link>
    <xacro:set_link_color link="imu_link" color="Gold"/>


    <!-- ************************** Joints *************************** -->

    <xacro:property name="joint_flop_both" value="0.03"/>
    <xacro:macro name="back_wheel_joint" params="dest_link y">
        <joint name="base_footprint_to_${dest_link}" type="continuous">
            <parent link="base_footprint"/>
            <child link="${dest_link}"/>
            <origin xyz="0 ${y} ${(props['wheel_radius_back'] / 2) - joint_flop_both}" rpy="${-pi/2} 0 0"/>
            <axis xyz="0 0 1"/>
        </joint>
        <gazebo reference="base_footprint_to_${dest_link}"/>
    </xacro:macro>
    <xacro:back_wheel_joint dest_link="wheel_BL" y="${props['track'] / 2}"/>
    <xacro:back_wheel_joint dest_link="wheel_BR" y="${-props['track'] / 2}"/>

    <xacro:property name="joint_flop_front" value="0.007"/>
    <xacro:macro name="steering_joints" params="steering_link wheel_link y">
        <joint name="base_footprint_to_${steering_link}" type="revolute">
            <parent link="base_footprint"/>
            <child link="${steering_link}"/>
            <origin xyz="${props['wheelbase']} ${y} ${props['wheel_radius_front'] / 2}" rpy="0 0 0"/>
            <axis xyz="0 0 1"/>
            <limit lower="${-props['max_steering']}" upper="${props['max_steering']}" effort="10000.0"
                   velocity="${props['steering_speed']}"/>
        </joint>
        <gazebo reference="base_footprint_to_${steering_link}"/>

        <joint name="${steering_link}_to_${wheel_link}" type="continuous">
            <origin xyz="0 0 ${-joint_flop_both - joint_flop_front}" rpy="${pi/2} 0 0"/>
            <parent link="${steering_link}"/>
            <child link="${wheel_link}"/>
            <axis xyz="0 0 1"/>
        </joint>
        <gazebo reference="${steering_link}_to_${wheel_link}"/>
    </xacro:macro>
    <xacro:steering_joints steering_link="steering_link_left" wheel_link="wheel_FL" y="${props['track'] / 2}"/>
    <xacro:steering_joints steering_link="steering_link_right" wheel_link="wheel_FR" y="${-props['track'] / 2}"/>

    <joint name="base_footprint_to_lidar" type="fixed">
        <parent link="base_footprint"/>
        <child link="lidar"/>
        <origin xyz="1.2 0 0.18" rpy="0 0 0"/>
    </joint>

    <joint name="base_footprint_to_gps" type="fixed">
        <parent link="base_footprint"/>
        <child link="gps_link"/>
        <origin xyz="0.5 0.5 0.1" rpy="0 0 0"/>
    </joint>

    <joint name="base_footprint_to_camera" type="fixed">
        <parent link="base_footprint"/>
        <child link="camera"/>
        <origin xyz="0.1 0 0.7" rpy="0 0.2 0"/>
    </joint>

    <xacro:macro name="camera_optical_frame" params="camera_link">
        <link name="${camera_link}_optical">
            <xacro:null_inertia/>
        </link>
        <joint name="${camera_link}_to_optical" type="fixed">
            <parent link="${camera_link}"/>
            <child link="${camera_link}_optical"/>
            <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}"/>
        </joint>
    </xacro:macro>

    <xacro:camera_optical_frame camera_link="camera"/>

    <joint name="base_footprint_to_imu" type="fixed">
        <parent link="base_footprint"/>
        <child link="imu_link"/>
        <origin xyz="0.75 0.5 0.1" rpy="0 0 0"/>
    </joint>


    <!-- ******************* Sensors *********************** -->

    <!-- Velodyne Puck VLP-16 -->
    <xacro:property name="gpu_string" value="${'gpu_' if use_gpu else ''}"/>
    <gazebo reference="lidar">
        <sensor type="${gpu_string}ray" name="lidar_sensor">
            <pose>0 0 0 0 0 0</pose>
            <visualize>false</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>360</samples>
                        <resolution>1</resolution>  <!-- controls interpolation, leave at 1 -->
                        <min_angle>${-pi}</min_angle>
                        <max_angle>${pi}</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.0</min>
                    <max>100.0</max>
                    <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.005</stddev>
                </noise>
            </ray>
            <plugin name="laser_controller" filename="libgazebo_ros_${gpu_string}laser.so">
                <topicName>/scan</topicName>
                <frameName>lidar</frameName>
            </plugin>
        </sensor>
    </gazebo>

    <!-- FLIR Blackfly + wide-angle lens -->
<!--    <gazebo reference="camera">-->
<!--        <sensor name="camera_sensor" type="camera">-->
<!--            <camera>-->
<!--                <horizontal_fov>1.6955</horizontal_fov>-->
<!--                <image>-->
<!--                    <width>1280</width>-->
<!--                    <height>964</height>-->
<!--                    <format>R8G8B8</format>-->
<!--                </image>-->
<!--                <clip>-->
<!--                    <near>0.05</near>-->
<!--                    <far>100</far>-->
<!--                </clip>-->
<!--                <noise>-->
<!--                    <type>gaussian</type>-->
<!--                    <mean>0.0</mean>-->
<!--                    <stddev>0.007</stddev>-->
<!--                </noise>-->
<!--            </camera>-->
<!--            <always_on>true</always_on>-->
<!--            <update_rate>15</update_rate>-->
<!--            <plugin name="camera_controller" filename="libgazebo_ros_camera.so">-->
<!--                <alwaysOn>true</alwaysOn>-->
<!--                <cameraName>camera</cameraName>-->
<!--                <imageTopicName>image_color_rect</imageTopicName>-->
<!--                <cameraInfoTopicName>camera_info</cameraInfoTopicName>-->
<!--                <frameName>camera_optical</frameName>-->
<!--                <distortionK1>0.0</distortionK1>-->
<!--                <distortionK2>0.0</distortionK2>-->
<!--                <distortionK3>0.0</distortionK3>-->
<!--                <distortionT1>0.0</distortionT1>-->
<!--                <distortionT2>0.0</distortionT2>-->
<!--            </plugin>-->
<!--        </sensor>-->
<!--    </gazebo>-->

    <!-- IMU -->
    <gazebo reference="imu_link">
        <gravity>true</gravity>
        <sensor name="imu_sensor" type="imu">
            <always_on>true</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <topic>__default_topic__</topic>
            <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
                <topicName>imu</topicName>
                <bodyName>imu_link</bodyName>
                <updateRateHZ>20.0</updateRateHZ>
                <gaussianNoise>0.005</gaussianNoise>
                <xyzOffset>0 0 0</xyzOffset>
                <rpyOffset>0 0 0</rpyOffset>
                <frameName>imu_link</frameName>
            </plugin>
            <pose>0 0 0 0 0 0</pose>
        </sensor>
    </gazebo>

    <!-- GPS -->
    <gazebo>
        <plugin name="gps_controller" filename="libhector_gazebo_ros_gps.so">
            <robotNamespace>/</robotNamespace>
            <updateRate>10</updateRate>
            <bodyName>gps_link</bodyName>
            <frameId>gps_link</frameId>
            <topicName>gps/fix</topicName>
            <velocityTopicName>gps/vel</velocityTopicName>
            <referenceLatitude>33.8</referenceLatitude>
            <referenceLongitude>-84.4</referenceLongitude>
            <referenceHeading>0</referenceHeading>
            <referenceAltitude>0</referenceAltitude>
            <drift>0.2 0.2 0.2</drift>
            <driftFrequency>0.01 0.01 0.01</driftFrequency>
            <gaussianNoise>0.05 0.05 0.05</gaussianNoise>
            <velocityDrift>0.05 0.05 0.05</velocityDrift>
            <velocityDriftFrequency>0.1 0.1 0.1</velocityDriftFrequency>
            <velocityGaussianNoise>0.05 0.05 0.05</velocityGaussianNoise>
        </plugin>
    </gazebo>

    <!-- ground-truth localization plugin -->
    <gazebo>
        <plugin name="ground_truth_tracker" filename="libgazebo_ros_p3d.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>10.0</updateRate>
            <bodyName>base_footprint</bodyName>
            <topicName>/odometry/ground_truth</topicName>
            <gaussianNoise>0.0</gaussianNoise>
            <frameName>world</frameName>
            <xyzOffsets>0 0 0</xyzOffsets>
            <rpyOffsets>0 0 0</rpyOffsets>
        </plugin>
    </gazebo>


    <!-- ****************** Actuators ********************** -->

    <gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo>

    <transmission name="trans_back_left">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="base_footprint_to_wheel_BL">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="motor_left">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <transmission name="trans_back_right">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="base_footprint_to_wheel_BR">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="motor_right">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <transmission name="left_steering_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="base_footprint_to_steering_link_left">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="left_steer_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

    <transmission name="right_steering_trans">
        <type>transmission_interface/SimpleTransmission</type>
        <joint name="base_footprint_to_steering_link_right">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
        </joint>
        <actuator name="right_steer_motor">
            <hardwareInterface>hardware_interface/EffortJointInterface</hardwareInterface>
            <mechanicalReduction>1</mechanicalReduction>
        </actuator>
    </transmission>

</robot>
